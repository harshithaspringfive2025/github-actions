# This workflow will build a MuleSoft project and deploy to CloudHub
 
name: Build and Deploy to Sandbox
 
on:

  push:

    branches: [ main ]

  workflow_dispatch:

jobs:

  build:

    runs-on: ubuntu-latest

    env:

      CA_CLIENT_ID: ${{ secrets.ANYPOINT_CLIENT_ID }}

      CA_CLIENT_SECRET: ${{ secrets.ANYPOINT_CLIENT_SECRET }}

    steps:

    - uses: actions/checkout@v3

    - uses: actions/cache@v3

      with:

        path: ~/.m2/repository

        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

        restore-keys: |

          ${{ runner.os }}-maven-

    - name: Set up JDK 11

      uses: actions/setup-java@v3

      with:

        java-version: 11

        distribution: 'zulu'

    - name: Print effective-settings (optional)

      run: mvn help:effective-settings

    - name: Build with Maven

      run: mvn -B package --file pom.xml

    - name: Stamp artifact file name with commit hash

      run: |

        artifactName1=$(ls target/*.jar | head -1)

        commitHash=$(git rev-parse --short "$GITHUB_SHA")

        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")

        mv $artifactName1 $artifactName2

    - name: Upload artifact 

      uses: actions/upload-artifact@master

      with:

          name: artifacts

          path: target/*.jar


  upload:

    needs: build

    runs-on: ubuntu-latest

    env:

      CA_CLIENT_ID: ${{ secrets.ANYPOINT_CLIENT_ID }}

      CA_CLIENT_SECRET: ${{ secrets.ANYPOINT_CLIENT_SECRET }}
 
    steps:    

    - uses: actions/checkout@v3

    - uses: actions/cache@v3

      with:

        path: ~/.m2/repository

        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

        restore-keys: |

          ${{ runner.os }}-maven-

    - uses: actions/download-artifact@master

      with:

        name: artifacts

    - name: Upload to Exchange

      run: |

        artifactName=$(ls *.jar | head -1)

        mvn deploy \

         -s .maven/settings.xml \

         -Dmule.artifact=$artifactName \



  deploy:

    needs: upload

    runs-on: ubuntu-latest

    env:

      CA_CLIENT_ID: ${{ secrets.ANYPOINT_CLIENT_ID }}

      CA_CLIENT_SECRET: ${{ secrets.ANYPOINT_CLIENT_SECRET }}
 
    steps:    

    - uses: actions/checkout@v3

    - uses: actions/cache@v3

      with:

        path: ~/.m2/repository

        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

        restore-keys: |

          ${{ runner.os }}-maven-

    - uses: actions/download-artifact@master

      with:

        name: artifacts

    - name: Deploy to Sandbox

      run: |

        artifactName=$(ls *.jar | head -1)

        mvn deploy -DmuleDeploy \

         -Dmule.artifact=$artifactName \

         -s .maven/settings.xml \

         -DskipTests \

         -DskipDeploymentVerification="true"
 
https://www.linkedin.com/pulse/github-actions-cicd-pipeline-mulesoft-cloudhub-deployment-jain
GitHub Actions CI/CD Pipeline for MuleSoft Cloudhub Deployment
In this article, we will set up a CI/CD pipeline using GitHub Actions for MuleSoft Cloudhub Deployment. Table of Contents: Prerequisites Introduction to CI/CD Introduction to GitHub Actions Setting...
 
<configuration>
<cloudHubDeployment>
<uri>https://eu1.anypoint.mulesoft.com/</uri>
<muleVersion>4.4.0</muleVersion>
<username>Dheenadhayalan</username>
<password>Dheena@07</password>
<applicationName>imv-dev-s-erp-to-crm-v1-api</applicationName>
<environment>Dev</environment>
<workerType>SMALL</workerType>
<region>eu-west-1</region>
<workers>1</workers>
<objectStoreV2>true</objectStoreV2>
</cloudHubDeployment>
<classifier>mule-application</classifier>
<sharedLibraries>
<sharedLibrary>
<groupId>org.postgresql</groupId>
<artifactId>postgresql</artifactId>
</sharedLibrary>
</sharedLibraries>
</configuration>
Anypoint Platform
 
dev_cr_papi_sales_pricing.jar
 
git reset --hard HEAD~1

 
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>
 
	<groupId>com.mycompany</groupId>
<artifactId>githubactionsci-cdpipeline</artifactId>
<version>1.0.0-SNAPSHOT</version>
<packaging>mule-application</packaging>
 
	<name>githubactionsci-cdpipeline</name>
 
	<properties>
<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
 
		<app.runtime>4.3.0-20210622</app.runtime>
<mule.maven.plugin.version>3.4.2</mule.maven.plugin.version>
</properties>
 
	<build>
<plugins>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-clean-plugin</artifactId>
<version>3.0.0</version>
</plugin>
<plugin>
<groupId>org.mule.tools.maven</groupId>
<artifactId>mule-maven-plugin</artifactId>
<version>${mule.maven.plugin.version}</version>
<extensions>true</extensions>
<configuration>
<classifier>mule-application</classifier>
<cloudHubDeployment>
<uri>https://anypoint.mulesoft.com</uri>
<muleVersion>${anypoint.muleVersion}</muleVersion>
<username>${anypoint.username}</username>
<password>${anypoint.password}</password>
<applicationName>${anypoint.appName}</applicationName>
<environment>${anypoint.env}</environment>
<region>${anypoint.region}</region>
<workers>${anypoint.workers}</workers>
<objectStoreV2>true</objectStoreV2>
</cloudHubDeployment>
</configuration>
</plugin>
</plugins>
</build>
 
	<dependencies>
<dependency>
<groupId>org.mule.connectors</groupId>
<artifactId>mule-http-connector</artifactId>
<version>1.5.25</version>
<classifier>mule-plugin</classifier>
</dependency>
<dependency>
<groupId>org.mule.connectors</groupId>
<artifactId>mule-sockets-connector</artifactId>
<version>1.2.1</version>
<classifier>mule-plugin</classifier>
</dependency>
</dependencies>
 
	<repositories>
<repository>
<id>anypoint-exchange-v2</id>
<name>Anypoint Exchange</name>
<url>https://maven.anypoint.mulesoft.com/api/v2/maven</url>
<layout>default</layout>
</repository>
<repository>
<id>mulesoft-releases</id>
<name>MuleSoft Releases Repository</name>
<url>https://repository.mulesoft.org/releases/</url>
<layout>default</layout>
</repository>
</repositories>
 
	<pluginRepositories>
<pluginRepository>
<id>mulesoft-releases</id>
<name>MuleSoft Releases Repository</name>
<layout>default</layout>
<url>https://repository.mulesoft.org/releases/</url>
<snapshots>
<enabled>false</enabled>
</snapshots>
</pluginRepository>
</pluginRepositories>
 
</project>
 
